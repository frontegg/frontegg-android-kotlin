name: "(â–¶) E2E Test"
on:
  push:
    branches-ignore:
      - 'master'
      - 'release/next'

env:
  CI: true
  LANG: en_US.UTF-8
  API_LEVEL: 34

concurrency:
  group: ci-e2e-test-${{ github.ref }}
  cancel-in-progress: true

jobs:
  uploadApk:
    name: 'Upload apk'
    runs-on: macos-14-xlarge
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.0
        with:
          fetch-depth: 0

      - name: Setup
        uses: ./.github/actions/setup
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Config root certificate for testing
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const securityConfig = `<network-security-config>\n    <base-config>\n        <trust-anchors>\n            <!-- Trust preinstalled CAs -->\n            <certificates src="system" />\n            <!-- Additionally trust user added CAs -->\n            <certificates src="user" />\n        </trust-anchors>\n    </base-config>\n</network-security-config>`
            fs.mkdirSync(path.join(process.env.GITHUB_WORKSPACE, 'embedded/src/main/res/xml'), { recursive: true });
            fs.writeFileSync(path.join(process.env.GITHUB_WORKSPACE, 'embedded/src/main/res/xml/network_security_config.xml'), securityConfig, 'utf8');
            
            let manifest = fs.readFileSync(path.join(process.env.GITHUB_WORKSPACE, 'embedded/src/main/AndroidManifest.xml'), 'utf8');
            manifest = manifest.replace(/<application/g, '<application android:networkSecurityConfig="@xml/network_security_config"');
            fs.writeFileSync(path.join(process.env.GITHUB_WORKSPACE, 'embedded/src/main/AndroidManifest.xml'), manifest, 'utf8');

      - name: Clean build
        run: ./gradlew clean

      - name: Build debug test apk
        run: ./gradlew :embedded:assembleDebug

      - name: Build release test apk
        run: ./gradlew :embedded:assembleRelease

      - name: Upload Assemble Debug Artifact
        uses: actions/upload-artifact@v4
        with:
          name: test-debug
          path: embedded/build/outputs/apk/debug/embedded-debug.apk

      - name: Upload Assemble Release Artifact
        uses: actions/upload-artifact@v4
        with:
          name: test-release
          path: embedded/build/outputs/apk/release/embedded-release.apk

      - name: Fetch artifact details
        id: apk_artifacts
        run: |
          # Fetch artifacts for the current workflow run
          response=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)

          # Extract debug and release APK artifact IDs
          debug_id=$(echo "$response" | jq -r '.artifacts[] | select(.name=="test-debug") | .id')
          release_id=$(echo "$response" | jq -r '.artifacts[] | select(.name=="test-release") | .id')

          # Construct download URLs
          debug_url="https://github.com/${{ github.repository }}/suites/${{ github.run_id }}/artifacts/$debug_id"
          release_url="https://github.com/${{ github.repository }}/suites/${{ github.run_id }}/artifacts/$release_id"

          echo "debugApkUrl=$debug_url" >> $GITHUB_ENV
          echo "releaseApkUrl=$release_url" >> $GITHUB_ENV

      - name: Get Commit SHA
        id: commit_sha
        run: echo "sha=${{ github.sha }}" >> $GITHUB_ENV

      - name: "Call trigger-e2e-test action"
        uses: ./.github/actions/trigger-e2e-test
        with:
          debugApkUrl: ${{ env.debugApkUrl }}
          releaseApkUrl: ${{ env.releaseApkUrl }}
          sha: ${{ env.sha }}
          bot_app_id: ${{ secrets.GH_FRONTEGG_BOT_APP_ID }}
          bot_app_key: ${{ secrets.GH_FRONTEGG_BOT_APP_SECRET }}
